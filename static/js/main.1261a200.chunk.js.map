{"version":3,"sources":["utils/alerts.js","http/index.js","services/responseService.js","pages/user/services/UserService.js","services/base.js","pages/user/Create.js","pages/user/User.js","utils/masks.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["alertSuccess","message","swal","title","icon","alertDanger","uniqueMessage","Array","isArray","setMultipleNotifyDanger","setUniqueNotifyDanger","messages","forEach","errorMessage","http","axios","create","baseURL","headers","responseService","obj","type","description","response","JSON","parse","stringify","navigator","onLine","verifyStatusResponse","data","status","400","error","verifyErrorsData","401","404","500","verifyTypeAction","503","errors","ErrorMessage","action","api","list","a","get","show","$id","$data","post","update","put","id","remove","delete","this","Create","props","getById","UserService","idRoute","setInformations","result","setState","user","onChange","target","state","value","checked","name","createOrUpdate","then","catch","err","handleStore","e","history","push","match","params","lastName","date","check","Form","FormGroup","Label","for","Input","placeholder","toString","className","Button","color","onClick","to","Component","Post","getAll","deleteItem","callback","nameModule","text","buttons","dangerMode","willDelete","verificationAlert","deleteItemCallback","Container","fluid","Table","bordered","hover","responsive","size","map","index","key","pattern","exec","replace","convertDateToBr","Badge","href","Header","Navbar","expand","NavbarBrand","App","Row","Col","basename","exact","path","component","Home","PostCreate","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1261a200.chunk.js","sourcesContent":["import swal from 'sweetalert'\nconst alertSuccess = (message) => {\n  swal({\n    title: message,\n    icon: \"success\",\n  })\n}\nconst alertDanger = (message) => {\n  const uniqueMessage = message.message || message\n  if (Array.isArray(message)) {\n    setMultipleNotifyDanger(message)\n  } else {\n    setUniqueNotifyDanger(uniqueMessage)\n  }\n}\nconst setUniqueNotifyDanger = (message) => {\n  swal({\n    title: message,\n    icon: \"error\",\n  })\n}\nconst setMultipleNotifyDanger = (messages) => {\n  messages.forEach(message => {\n    this.setUniqueNotifyDanger(message.errorMessage)\n  })\n}\nconst verificationAlert = ({ id, message, nameModule }, callback) => {\n  swal({\n    title: \"Are you sure?\",\n    text: message,\n    icon: \"warning\",\n    buttons: true,\n    dangerMode: true,\n  })\n    .then((willDelete) => {\n      if (willDelete) {\n        callback(id).then(() => {\n          swal(`Poof! Your imaginary ${nameModule} has been deleted!`, {\n            icon: \"success\",\n          });\n        }).catch((err) => {\n          alertDanger(err)\n        });\n      } else {\n        swal(`Your imaginary ${nameModule} is safe!`);\n      }\n    });\n}\nexport {\n  alertSuccess,\n  alertDanger,\n  verificationAlert\n}","import axios from 'axios'\n\nexport const http = axios.create({\n  baseURL: `http://localhost:3000/`,\n  headers: { 'Access-Control-Allow-Origin': 'true', 'Content-Type': 'application/json', 'Cache-Control': 'no-cache', 'Pragma': 'no-cache' }\n})","const responseService = (obj, type, description) => {\n    let response = JSON.parse(JSON.stringify(obj)).response\n    return !navigator.onLine ? ('Sem acesso Ã  internet, por favor, tente mais tarde') : (!response ? obj.message : verifyStatusResponse(response, type, description))\n  }\n  \n  const verifyStatusResponse = (response, type, description) => {\n    let data = response.data\n    let status = response.status\n    let typesStatus = {\n      400: { error: verifyErrorsData(data) },\n      401: { error: ('SessÃ£o expirada, por favor , logue novamente') },\n      404: { error: ('EndereÃ§o de acesso nÃ£o encontrado') },\n      500: { error: verifyTypeAction(type, description) },\n      503: { error: (`Servidor indisponivel, tente mais tarde`) }\n    }\n    let action = typesStatus[status]\n    return action.error\n  }\n  const verifyErrorsData = (data) => {\n    return !data.errors ? (!data[0] ? '' : data[0].ErrorMessage) : (!data.errors ? '' : data.errors[0].ErrorMessage)\n  }\n  \n  const verifyTypeAction = (action, description) => {\n    let typesAction = {\n      'list': { error: (`NÃ£o foi possÃ­vel realizar a listagem, tente mais tarde`) },\n      'get': { error: (`NÃ£o foi possÃ­vel realizar a consulta de ${description}, tente mais tarde`) },\n      'create': { error: ('NÃ£o foi possÃ­vel realizar o cadastro, tente mais tarde') },\n      'update': { error: ('NÃ£o foi possÃ­vel realizar a ediÃ§Ã£o, tente mais tarde') },\n      'remove': { error: ('NÃ£o foi possÃ­vel realizar a exclusÃ£o, tente mais tarde') }\n    }\n    return typesAction[action].error\n  }\n  \n  export {\n    responseService\n  }\n  ","import Base from '../../../services/base'\nclass UserService extends Base {\n  constructor() {\n    super('/users')\n  }\n}\nexport default new UserService()\n","import { http } from '../http'\nimport { responseService } from './responseService'\nexport default class Base {\n  constructor (api) {\n    this.api = api\n    this.http = http\n    this.responseService = responseService\n  }\n  list = async () => {\n    try {\n      const response = await this.http.get(this.api)\n      return response.data\n    } catch (error) {\n      throw this.responseService(error, 'list')\n    }\n  }\n  show = async ($id) => {\n    try {\n      const response = await this.http.get(`${this.api}/${$id}`)\n      return response.data\n    } catch (error) {\n      throw this.responseService(error, 'get', 'item')\n    }\n  }\n\n  create = async ($data) => {\n    try {\n      const response = await this.http.post(this.api, $data)\n      return response.data\n    } catch (error) {\n      throw this.responseService(error, 'create')\n    }\n  }\n\n  update = async ($data) => {\n    try {\n      const response = await this.http.put(`${this.api}/${$data.id}`, $data)\n      return response.data\n    } catch (error) {\n      throw this.responseService(error, 'update')\n    }\n  }\n\n  remove = async ($id) => {\n    try {\n      const response = await this.http.delete(`${this.api}/${$id}`)\n      return response.data\n    } catch (error) {\n      throw this.responseService(error, 'remove')\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport { Form, Button, Label, Input, FormGroup } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { alertSuccess, alertDanger } from \"../../utils/alerts\";\nimport UserService from \"./services/UserService\";\nexport default class Create extends Component {\n  constructor(props) {\n    super(props);\n    this.idRoute = props.match.params.id || null;\n    this.state = {\n      user: { id: \"\", name: \"\", lastName: \"\", date: \"\", check: false },\n    };\n  }\n  async componentDidMount() {\n    if (this.idRoute) {\n      await this.getById()\n        .then((result) => {\n          this.setInformations(result);\n        })\n        .catch((error) => {\n          alertDanger(error);\n        });\n    }\n  }\n  getById = async () => {\n    try {\n      const response = await UserService.show(this.idRoute);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  };\n  setInformations = (result) => {\n    this.setState({ user: result });\n  };\n  onChange = ({ target }) => {\n    const { user } = this.state;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    this.setState({ user: { ...user, [target.name]: value } });\n  };\n  createOrUpdate = async (user) => {\n    if (this.idRoute) {\n      await UserService.update(user)\n        .then((result) => {\n          alertSuccess(\"User successfully modified\");\n        })\n        .catch((err) => {\n          alertDanger(err);\n        });\n    } else {\n      await UserService.create(user)\n        .then((result) => {\n          alertSuccess(\"User successfully created\");\n        })\n        .catch((err) => {\n          alertDanger(err);\n        });\n    }\n  };\n  handleStore = async (e) => {\n    const { user } = this.state;\n    await this.createOrUpdate(user);\n    this.props.history.push(\"/\");\n  };\n  render() {\n    let { user } = this.state;\n    return (\n      <div>\n        <h2>New Item</h2>\n        <Form>\n          <FormGroup>\n            <Label for=\"name\">Name: </Label>\n            <Input type=\"text\" value={user.name} onChange={this.onChange} name=\"name\" id=\"name\" placeholder=\"Insert item name here\" />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"lastName\">LastName: </Label>\n            <Input type=\"text\" value={user.lastName} onChange={this.onChange} name=\"lastName\" id=\"lastName\" placeholder=\"Insert item lastName here\" />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"date\">Date of birth: </Label>\n            <Input type=\"date\" value={user.date} onChange={this.onChange} name=\"date\" id=\"date\" placeholder=\"Insert item date here\" />\n          </FormGroup>\n          <FormGroup check>\n            <Label check></Label>\n            <Input type=\"checkbox\" name=\"check\" onChange={this.onChange} id=\"check\" check={user.check.toString()} /> Done?\n          </FormGroup>\n          <FormGroup className=\"mt-3\">\n            <Button color=\"primary\" className=\"mr-3\" onClick={this.handleStore}>\n              Add\n            </Button>\n            <Link to=\"/\" className=\"btn btn-secondary\">\n              Back To list\n            </Link>\n          </FormGroup>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Container, Table, Button, Badge } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport UserService from \"./services/UserService\";\nimport { alertDanger, verificationAlert } from \"../../utils/alerts\";\nimport { convertDateToBr } from \"../../utils/masks\";\nexport default class Post extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { data: [] };\n  }\n  componentDidMount() {\n    this.getAll();\n  }\n  getAll = async () => {\n    try {\n      const response = await UserService.list();\n      this.setState({ data: response });\n    } catch (error) {\n      alertDanger(error);\n    }\n  };\n  deleteItem = ({ id, name }) => {\n    verificationAlert({ id, message: `Are you sure you want to delete the ${name} user?`, nameModule: \"user\" }, this.deleteItemCallback);\n  };\n  deleteItemCallback = async (id) => {\n    try {\n      await UserService.remove(id);\n      await this.getAll();\n    } catch (error) {\n      throw error;\n    }\n  };\n  render() {\n    const { data } = this.state;\n    return (\n      <Container fluid className=\"mt-2\">\n        <Link to={`/add`} className=\"btn btn-primary float-right\">\n          Add to list\n        </Link>\n        <Table bordered hover responsive size=\"sm\" className=\"mt-2\">\n          <thead>\n            <tr>\n              <th className=\"text-center\">#</th>\n              <th className=\"text-center\">Name</th>\n              <th className=\"text-center\">LastName</th>\n              <th className=\"text-center\">Date of birth</th>\n              <th className=\"text-center\" >Check</th>\n              <th className=\"text-center\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((user, index) => (\n              <tr key={index}>\n                <td className=\"text-center\">{user.id}</td>\n                <td className=\"text-center\">{user.name}</td>\n                <td className=\"text-center\">{user.lastName}</td>\n                <td className=\"text-center\"> {convertDateToBr(user.date)}</td>\n                <td className=\"text-center\">\n                  {user.check ? (\n                    <Badge href=\"#\" color=\"success\">\n                      <i className=\"fas fa-check-circle fa-2x\"></i>\n                    </Badge>\n                  ) : (\n                    <Badge href=\"#\" color=\"danger\">\n                      <i className=\"fas fa-times-circle fa-2x\"></i>\n                    </Badge>\n                  )}\n                </td>\n                <td className=\"text-center\">\n                  <Link className=\"btn btn-success btn-sm mr-3\" size=\"sm\" to={`edit/${user.id}`}>\n                    <i className=\"fas fa-pen\"></i>\n                  </Link>\n                  <Button color=\"danger\" size=\"sm\" onClick={() => this.deleteItem(user)}>\n                    <i className=\"fas fa-trash\"></i>\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </Container>\n    );\n  }\n}\n","const convertDateToBr = (date) => {\n    if (date === null) return ''\n    let pattern = /(\\d{4})-(\\d{2})-(\\d{2})/g\n    let getDate = (pattern.exec(date))[0]\n    return getDate.replace(pattern, '$3/$2/$1')\n}\nexport {\n    convertDateToBr\n}","import React from 'react';\nimport {\n    Navbar,\n    NavbarBrand,\n} from 'reactstrap'\nfunction Header() {\n    return (\n        <div>\n            <Navbar color=\"light\" expand=\"md\" className=\"mb-3\">\n            <NavbarBrand>Checklist</NavbarBrand>\n            </Navbar>\n        </div>\n    )\n}\nexport default Header","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport PostCreate from \"./pages/user/Create\";\nimport Home from \"./pages/user/User\";\nimport Header from \"./components/Header\";\nfunction App() {\n  return (\n    <main>\n      <Header />\n      <Container>\n        <Row>\n          <Col>\n            <Router basename=\"react_crud\">\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/add\" component={PostCreate} />\n              <Route exact path=\"/edit/:id\" component={PostCreate} />\n            </Router>\n          </Col>\n        </Row>\n      </Container>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/all.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}